<style type="text/css">
	body, td, th, tr {
		font-family: Tahoma, Geneva;
		vertical-align:top;
		text-align: left;
		font-size: 16px;}
	
	body {transform: scale(1);}	
	.t1 {font-size: 26px;}
	.t2 {font-size: 20px;}
	.t3 {font-size:18px; color:#999999;}
	.t4 {font-size: 12px; border-bottom: solid 1px #666666; padding:5px 0 0 0; margin: 0 0 5px 0;}
	.f6 {font-size:6px;}
.f9 {font-size:9px;}
	.f12 {font-size:12px;}
	.f14 {font-size:14px;}
	.f15 {font-size:15px;}
	.f22 {font-size:22px;}
	
	.smltxt {line-height:6px;font-size:9px; display: block; padding: 1px 0;}
	
	.pa1 {padding:0 8px 4px 8px;}
	.pa2 {padding:0 0 4px 0;}
	.pt10 {padding-top:10px;}
	.pt15 {padding-top:15px;}
	.pt20 {padding-top:20px;}
	.p0 {padding:0;}
	.p8 {padding:8px;}
	.p3 {padding:3px;}
	.m0 {margin:0;}
	.m4 {margin:4px;}
	.mb {margin: 0 0 3px 0;}
	.m10 {margin-bottom:10px;}
	.bld {font-weight:bold;}
	.bb {border-bottom: solid 1px #666666 !important;}
	.b9 {border: solid 1px #999999 !important;}
	.bn {border: none;}	
	.txtl {text-align: left;}
	.txtc {text-align: center;}
	.txtr {text-align: right;}
	
	.linetr {word-break:break-all;}
	.boldo {word-wrap: break-word; overflow: hidden; text-overflow: ellipsis;}
	.checks span {border: solid 1px #999999;display: inline-block; padding: 3px; height: 18px;}
</style>

{% liquid
	if note contains "Client/Partyname::" 
	 assign arr = note | strip_newlines | split: 'shipping_notes: ' 
	 assign del1 = arr.first | split: 'Delivery Date: ' 
	 assign note1 = arr.last | split: 'Start_time: ' 
	 assign start1 = note1.last | split: 'Room: ' 
	 assign room = start1.last | split: 'Client/Partyname:: ' 
	 assign name = room.last | split: 'Pickup/Delivery:: ' 
	 assign meth1 = name.last | split: 'Billing_Address:' 

	 assign note = note1.first | prepend: "Notes: " 
	 assign notewh = "Start Time: "| prepend: " - " | append: start1.first | append: " - Client/Partyname: " | append: name.first | append: " - Room: " | append: room.first | append: " - Venue: " | append: shipping_address.company | append: " - WHOLESALE ORDER" 

	 if meth1.first ==  "Local Delivery" 
		 assign ddate = del1.last 
		 assign dt1 = start1.first | date: "%s"  | minus: 7200  
		 assign dt12 = dt1 | date: "%l:%M %p" 
		 assign dt2 = start1.first | date: "%s" | minus: 1800  
		 assign dt22 = dt2 | date: "%l:%M %p" 
		 assign dtime = dt12 | append: " - " | append: dt22 
	 else 
		 assign putime1 = start1.first | date: "%s" | minus: 5400  
		 assign putime = putime1 | date: "%l:%M %p" 
		 assign pudate = del1.last 
	 endif 
 else 

   # ADDING PICKEASY            
     if attributes.['Order Due Time']   # PICKEASY 
                       
          if attributes.['Order Fulfillment Type'] == "Store Pickup" 
			assign meth = "pick"
			assign methlab = "PICK UP"
             assign putime = attributes.['Order Due Time'] 
             assign pudate = attributes.['Order Due Date']             

         elsif attributes.['Order Fulfillment Type'] == "Local Delivery" 
			assign meth = "del"
			assign methlab = "PCAKES DELIVERY"
			assign dtime = attributes.['Order Due Time'] 
             assign ddate = attributes.['Order Due Date'] 
		else 
			assign meth = "unk"
			assign methlab = "???"
			 assign dtime = attributes.['Order Due Time'] 
             assign ddate = attributes.['Order Due Date'] 
			 assign putime = attributes.['Order Due Time'] 
             assign pudate = attributes.['Order Due Date']  
        endif               
     else                        
         assign dtime = attributes.Delivery-Time 
         assign ddate = attributes.Delivery-Date 
         assign putime = attributes.Pickup-Time 
         assign pudate = attributes.Pickup-Date              
     endif 
 endif         
     if notewh
        # WHOLESALE
	elsif note
		 if note == ""
			assign note2 = "no"
         else
            # MOST COMMON FOR REGULAR NOTES 
		 endif
	else
		assign note2 = "no"
	endif %}

<table width="100%" border="0" cellspacing="0" cellpadding="0" class="mb">
	<tr class="pa1">
		<td width="55%" class="t1 bb">
		 {% if meth == "pick" %}
			{% capture current_day %}{{ pudate | date: "%Y-%m-%d" }}{% endcapture %}
			{% capture new_current_day %}{{ current_day | replace: '/', '-' }}{% endcapture %}
			{% assign tdate1 = new_current_day | date: "%Y%m%d"  %}
			{% assign tdate2 = new_current_day | date: "%b %d, %Y"  %}	
			{% assign tdate3 = new_current_day | date: "%b %d, %Y"  %}	
			{% assign otime = putime  %}
			{% assign otit = "Pickup"  %}
			{% assign dday = new_current_day | date: "%a"  %}
		{% endif %}

		{% if meth == "del" %}
			{% capture current_day %}{{ ddate | date: "%Y-%m-%d" }}{% endcapture %}
			{% capture new_current_day %}{{ current_day | replace: '/', '-' }}{% endcapture %}	
			{% assign tdate1 = new_current_day | date: "%Y%m%d"  %}
			{% assign tdate2 = new_current_day | date: "%b %d, %Y"  %}
			{% assign otit = "Delivery"  %}
			{% assign dday = new_current_day | date: "%a"  %}
		{% endif %}		  
		  
		{% assign today_date1 = 'now' | date: '%j'
		assign order_date1 = new_current_day | date: '%j'
		assign calcdate = order_date1 | minus: today_date1 %}		  

		{% if today_date1 == order_date1 %}		   
		   ORDER FOR TODAY [&#33;]	 
		{% elsif today_date1 < order_date1 %}
			{% if calcdate > 1 %}	
				FUTURE ORDER &raquo; &nbsp;&nbsp; <span class="f12"> In {{ calcdate }} days</span>
			{% else %}		  
				FUTURE ORDER &raquo; &nbsp;&nbsp; <span class="f12">For tomorrow</span>
			{% endif %}
		{% else %}
			NEW ORDER
		{% endif %}
			
			<style>.{{dday}} {background-color: #666; color: #fff;}</style>
		</td>
		<td width="45%" class="t1 txtr bb">
			&nbsp;
			  {{methlab}}
		</td>
	</tr>
	 <tr class="pa2">
		<td width="55%" style="padding:0px 8px 10px 4px;">
			<div class="t4">Customer Info:</div> 
			<div class="t1">{{ billing_address.first_name }} {{billing_address.last_name}} </div>       
			<div>
				Phone:  
				{% assign ph = billing_address.phone | remove: "-" | remove: "+" | remove: "(" | remove: ")" | remove: " " | remove: "." | split: '' %}
				{% if ph[0] == "1" %}        
				{{ ph[1] }}{{ ph[2] }}{{ ph[3] }}-{{ ph[4] }}{{ ph[5] }}{{ ph[6] }}-{{ ph[7] }}{{ ph[8] }}{{ ph[9] }}{{ ph[10] }}
				{% else %}        
				{{ ph[0] }}{{ ph[1] }}{{ ph[2] }}-{{ ph[3] }}{{ ph[4] }}{{ ph[5] }}-{{ ph[6] }}{{ ph[7] }}{{ ph[8] }}{{ ph[9] }}
				{% endif %}   
			</div> 
			<div class="t4 pt10">Second/Delivery Info:</div> 
			<div>{{ shipping_address.name }}</div>
			<div>    
				Phone: 
				{% assign ph = shipping_address.phone | remove: "-" | remove: "+" | remove: "(" | remove: ")" | remove: " " | remove: "." | split: '' %}
				{% if ph[0] == "1" %}        
				{{ ph[1] }}{{ ph[2] }}{{ ph[3] }}-{{ ph[4] }}{{ ph[5] }}{{ ph[6] }}-{{ ph[7] }}{{ ph[8] }}{{ ph[9] }}{{ ph[10] }}
				{% else %}        
				{{ ph[0] }}{{ ph[1] }}{{ ph[2] }}-{{ ph[3] }}{{ ph[4] }}{{ ph[5] }}-{{ ph[6] }}{{ ph[7] }}{{ ph[8] }}{{ ph[9] }}
				{% endif %} 
			</div>
			<div class="t4 pt10">Revel Order: </div> 
			<div class="t2">#w{{ order_number }}</div> 
		</td>
		<td width="45%" style="padding: 0 8px 10px 4px;">
			{% if meth == "pick" %}
				<div class="t4">Pick up information:</div>
					<div class="t1">
						{{ new_current_day | date: "%a, %b %-d, %Y"  }} 
					</div>
				<div class="t1">{{ putime }}</div>
			{% endif %}

			{% if meth == "del" %}
				<div class="t4">Delivery information:</div>
					<div class="t1">
						{{ new_current_day | date: "%a, %b %-d, %Y"  }} 
					</div>
				<div class="t1">
					<div>
					{% if dtime contains '10:00 AM' %}
						10:00 - 1:00
						{% assign dt = "10:00 AM" %}
					{% elsif dtime contains '12:00 PM' %}
						12:00 - 3:00
						{% assign dt = "12:00 PM" %}
					{% elsif dtime contains '2:00 PM' %}
						2:00 - 5:00
						{% assign dt = "2:00 PM" %}
					{% elsif dtime contains '4:00 PM'  %}
						4:00 - 7:00
						{% assign dt = "4:00 PM" %}
					{% else %}
						{{dtime}}
					{% endif %}
						</div>
				</div>
				<div class="t1">{{ shipping_address.name }}</div>
				<!--div>Delivery Window: {{ dtime }}</div-->
				<div class="f12">Delivering to: {{ shipping_address.city }}</div>
			<div class="f12">Company: {{ shipping_address.company }}</div>
			{% endif %}
			
		    {% if meth == "unk" %}
				<div class="t4">Order information:</div>
					<div class="t1">
             			{{ attributes.['Order Due Date'] }}
					</div>
				<div class="t1">{{ attributes.['Order Due Time'] }}</div>
				<div class="t1">DOUBLE CHECK DETAILS!</div>
				<div class="f12">CHECK DATE,TIME, AND METHOD IN SHOPIFY</div>
                <div class="f12">Might be incorrect.</div>
				<div class="f12">Ship Price: {{ shipping_price | money }}</div>
			{% endif %}			
		</td>
	  </tr>
	{% if fulfillment_aborted %}
	  <tr>
		<td class="txtc b9 p8" colspan="2">
		The above order was not automatically fulfilled because it was flagged as suspicious.
		</td>
	  </tr>
	{% endif %}

	{% if has_high_risks? %}
	  <tr>
		<td colspan="2" class="txtc b9 p8 m4">
		<p class="bld">Security check:</p>
		<p>This order has a risk of being fraudulent. Please show Philip before proceeding.</p>
		</td>
	  </tr>
	{% endif %}
	{% assign line_items = line_items %}
	{% assign cnt_top_ck = 0  %}
			
	{% for line in line_items %}
		{% assign lpt = line.product.type %}
		{% if lpt == "Standard Cakes" or lpt == "Semi Custom Cakes" or lpt == "Custom Cakes" or lpt == "Tiered Cakes" or lpt == "Cakes - Custom" or lpt =="Cakes - Semi Custom" %}
			{% assign cnt_top_ck_tot = cnt_top_ck_tot | plus: 1 %}
		{% endif %}
	{% endfor %}
		
	{% if cnt_top_ck_tot > 1 %}
	<tr>
		<td colspan="2" class="t1 txtc b9 p8">
			HAS {{cnt_top_ck_tot}} CAKES! 
		</td>
	 </tr>
	{% endif%}
    {% if note2 != "no" %}		
		  <tr>
			  <td colspan="2">		
				<table width="100%" style="border: 2px dotted #000000; padding: 3px; margin: 3px 0;">
				  <tr>
					<td width="65%" class="p8">
<div class="f9">"Any requests will be considered, are not guaranteed, and may incur additional costs."</div>

{{ note }} {{notewh}} <br>			  	  
					  </td>
					<td width="35%" class="f22 p8">ORDER NOTES! <br>READ THESE!</td>
				  </tr>
				</table>               
			 </td>
		</tr>
	{% endif%}

		<tr class="pt10">
			<td colspan="2" >
				<div class="row">
					<table width="100%" cellpadding="4" cellspacing="0" class="order-table table bb">
					  <thead>
						<tr class="f14 bb">
						  <th width="5%" class="txtc bb p3" data-key="qty">Qty</th>
						  <th width="72%" class="bb p3">Item</th>
						  <th width="11%" class="txtr bb p3" data-key="price">Price Ea</th>
						  <th width="12%" class="txtr bb p3" data-key="item_total" >Total</th>
						</tr>
					  </thead>
					  <tbody>		  
	<!--x Bold 1 -->    
  {% assign hidden_variant_ids = "" %}
  {% for line in line_items %}
  {% for prop in line.properties %}

  {% if prop.first == "_boldVariantIds" %}
  {% assign hidden_variant_ids = hidden_variant_ids | append: prop.last | append: ',' %}
  {% endif %}
  {% endfor %}
  {% endfor %}
  <!--x Bold 1 -->

{% assign gb2 = 0 %}
{% assign linebreak = 0 %}
{% assign ty = "" %}

<!-- SPLIT DOZEN MINI CUPCAKE ARRAY COUNTER -->
	{% liquid 
    assign mcc-choc-array = "Chocolate with Chocolate Fudge,Chocolate with Oreo Mousse,Chocolate with Nutella Mousse,Chocolate with Nutella Mousse ,S'mores,S&#39;mores,S'mores,Chocolate Strawberry Cream,Chocolate Caramel Salty,Chocolate with Chocolate Chip Mousse,Chocolate with Strawberry Mousse,Chocolate Strawberry Mousse,Chocolate with Vanilla Mousse,Chocolate with Peanut Butter Mousse,Chocolate with Chocolate Mousse,Chocolate Chocolate Mousse,Chocolate with  Mint Chip Mousse,Peppermint Patty,Fudgey Mint,Chocolate Razzle,Peppermint Patty Cupcake,Peppermint patty"
	assign mcc-white-array = "White Razzle,Strawberry Blonde,Apple Bliss,Blueberry Bliss,Mango Bliss,Éclair ,The Neapolitan ,Piña Colada ,White with Strawberry Mousse,White with Nutella Mousse,White with Vanilla Mousse,White with Chocolate Fudge,White with Strawberry Oreo Mousse,White with Lemon,Candy Bar,Hot Chocolate Cheetah"
	assign mcc-red-array = "Red Velvet with Cream Cheese Mousse,Red Velvet with Chocolate Chip Mousse,Red Velvet with Oreo Mousse,Red Velvet with Nutella Mousse,Red Razzle"
	assign mcc-banana-array = "Banana with Vanilla Cream,Banana Mango,Banana Strawberry,Banana Guava,Banana Split ,The Elvis,The Elvis ,Monkey's Uncle,Monkey&#39;s Uncle,Banana Strawberry with Cream Cheese Mousse"
	assign mcc-lemon-array = "Lemon Drop,Lemon Razzle,Lemon Strawberry,Lemon Guava,Lemon Blueberry,Lemon Bliss,Lemon Colada"
	assign mcc-bp-array = "Butter Pecan,Blueberry Pancake,Snickerdoodle,Early Riser"
	assign mcc-straw-array = "Very Berry Strawberry,Strawberry Blueberry,Strawberry Bliss,Strawberry with Vanilla Mousse,Strawberry with Strawberry Oreo Mousse,Strawberry with Chocolate Mousse"
	assign mcc-pnut-array = "Dos PB & J,Peanut Butter with Chocolate Fudge"
	assign mcc-pump-array = "Pumpkin with Cream Cheese Mousse,Pumpkin With Cream Cheese Mousse Cupcake"
	assign mcc-pumpchip-array = "Pumpkin Chocolate Chip with Cream Cheese Mousse,Pumpkin Chocolate Chip with Cream Cheese Mousse Cupcake" 
    %}		  

<!-- REGULAR DOZEN MINI CUPCAKE ARRAY COUNTER -->

{% comment %} SPACE SAVER - REWRITE THIS WITH TAGS.{% endcomment %}	  
	{% liquid  
        assign mccdzn-choc-array = "CCMN-1000,CCMN-1050,CCMN-1051,CCMN-1052,CCMN-1053,CCMN-1025,CCMN-1002,CCMN-1005,CCMN-1006,CCMN-1004,CCMN-1001,CCMN-1003,CCMN-1081,CCMN-1080,CCMN-1038"
	 assign mccdzn-white-array = "CCMN-1054,CCMN-1055,CCMN-1057,CCMN-1056,CCMN-1058,CCMN-1028,CCMN-1026,CCMN-1027,CCMN-1013,CCMN-1059,CCMN-1014,CCMN-1008,CCMN-1060,CCMN-1084,CCMN-1083,CCMN-1079"
	 assign mccdzn-red-array = "CCMN-1017,CCMN-1016,CCMN-1061,CCMN-1062,CCMN-1085"
	 assign mccdzn-banana-array = "CCMN-1018,CCMN-1064,CCMN-1063,CCMN-1065,CCMN-1020,CCMN-1019,CCMN-1066,CCMN-1082"
	 assign mccdzn-lemon-array = "CCMN-1021,CCMN-1023,CCMN-1067,CCMN-1068,CCMN-1069,CCMN-1070,CCMN-1022"
	 assign mccdzn-bp-array = "CCMN-1029,CCMN-1071,CCMN-1072,CCMN-1073"
	 assign mccdzn-straw-array = "CCMN-1074,CCMN-1075,CCMN-1076,CCMN-1077,CCMN-1078,CCMN-1087"
	 assign mccdzn-pnut-array = "CCMN-1030,CCMN-1031"
	 assign mccdzn-pump-array = "CCMN-1033"
	 assign mccdzn-pumpchip-array = "CCMN-1034"	
	 assign mccdzn-gfchoc-array = "CCMN-2000,CCMN-2050,CCMN-2051,CCMN-2017,CCMN-2002,CCMN-2005,CCMN-2006,CCMN-2004,CCMN-2001,CCMN-2003"	
	 assign mccdzn-gfwhite-array = "CCMN-2052,CCMN-2053,CCMN-2054,CCMN-2055,CCMN-2056,CCMN-2019,CCMN-2018,CCMN-2013,CCMN-2057,CCMN-2014,CCMN-2008"
	 assign mccdzn-vechoc-array = "CCMN-3000,CCMN-3001,CCMN-3002,CCMN-3021,CCMN-3003,CCMN-3004,CCMN-3005,CCMN-3006"
	 assign mccdzn-ve_w-array = "CCMN-3022,CCMN-3023,CCMN-3020,CCMN-3008,CCMN-3011,CCMN-3007,CCMN-3009,CCMN-3010,CCMN-3012"	
	 assign mccdzn-ve_s-array = "CCMN-3013,CCMN-3024,CCMN-3015,CCMN-3016,,CCMN-3017"	
	 assign mccdzn-stdcstm-array = "CCMN-1032"	
	 assign mccdzn-gfcstm-array = "CCMN-2020"	
	 assign mccdzn-vecstm-array = "CCMN-3018" 
     %}		
			     
{% assign line_items = line_items | sort: 'price' %}
{% for line in line_items %}

	{% liquid
    assign lq = line.quantity
	 assign sku = line.variant.sku
	 assign lpt = line.product.type
	 assign gbbo = "" 
	 assign crtitemhascard = ""
	 assign bldop = 0
	 assign stdck = ""		
	 assign cstmcc_cnt = "0" 
     %}							  
						  
  <!-- Bold 2 -->
	  {% assign variant_id = line.variant_id | append: "" %}
	  {% if hidden_variant_ids contains variant_id %}{% continue %}{% endif %}

	  {% assign bold_item_price = line.price 
	   assign bold_line_price = line.line_price
	   assign bold_var_ids = "" 
	   assign price_index = "" 
	   assign bold_qtys = "" %}

	  {% for prop2 in line.properties %}
        {% if prop2.first == "_boldVariantIds" %}
            {% assign bold_var_ids = prop2.last | split: "," %}
        {% elsif prop2.first == "_boldVariantPrices" %}
            {% assign price_index = prop2.last | split: "," %}
        {% elsif prop2.first == "_boldVariantQtys" %}
            {% assign bold_qtys = prop2.last | split: "," %}
	    {% endif %}
	  {% endfor %}

	  {% unless price_index == "" && bold_var_ids == "" %}
	    {% for price in price_index %}
	        {% assign bold_qty = 1 %}
	        {% if bold_qtys.length > 0 %}{% assign bold_qty = bold_qtys[forloop.index0] %}{% endif %}
            {% assign bold_item_price = bold_item_price | plus: price %}
            {% assign temp_price = price | times: bold_qty %}
            {% assign bold_line_price = bold_line_price | plus: temp_price %}
	    {% endfor %}
	  {% endunless %}

	  {% liquid 
      assign bold_options = " "
      assign linebreak = 0
      assign presym = ""
      assign postsym = ""
      assign spanadj = ""
      assign spanadjend = "" 	
      assign spanadj2 = ""
      assign lq2 = ""
      assign postsym2 = ""
      assign imglink = ""
      assign cakesize = ""
      assign greetsel = ""
       assign greettext = ""
      %}  						  
        
	  {% for bold_option in line.properties %}
		  {% assign first_char = bold_option.first | slice: 0, 1 %}
		  {% assign opt_title = bold_option | first %}
		  {% assign opt_desc = bold_option | last %}
						  
			  {% if linebreak == 0 %} 
				{% assign linebreaker = '' %}
			  {% else %}
				{% assign linebreaker = '<br />' %}
			  {% endif %}

		{% assign brdr1 = "" %}
		{% assign brdr2 = "" %}
		{% assign mcc_error = "" %}			  
		<!-- skips -->
		{% assign boldskip = "" %}				  
		{% if opt_title contains "Add a Greeting" %}
			{% if opt_desc contains "Yes" %}
				{% assign boldskip = "skip" %}
				{% assign greetsel = "yes" %}
			{% else %}
				{% assign greetsel = "no" %}	  
			{% endif %}	
						  
		{% elsif opt_title contains "Customize the top of the cake" %}
			{% if opt_desc contains "Add Greeting" %}
				{% assign boldskip = "skip" %}
				{% assign greetsel = "yes" %}
			{% elsif opt_desc contains "Add Edible Image" %}			  
					{% assign brdr1 = "<div class='t1 b9 p3 m4'>" %}
					{% assign brdr2 = "</div>" %}  	    
			{% else %}
				{% assign greetsel = "no" %}
			{% endif %}	
		 	
		{% elsif opt_title contains "Add an edible image"  or opt_title contains "Add an Edible Image:" or opt_title contains "Ombre Color" %}
				{% if opt_desc contains "No" %}
					{% assign boldskip = "skip" %}
				{% else %}
					{% assign brdr1 = "<div class='t1 b9 p3 m4'>" %}
					{% assign brdr2 = "</div>" %}  
				{% endif %}	
						  
		{% elsif opt_title contains "Planet Accent Color" or opt_title contains "Icing Color" %}
					{% assign brdr1 = "<div class='t1 b9 p3 m4'>" %}
					{% assign brdr2 = "</div>" %}  
	
		{% elsif opt_title contains "Flavor Choices" %}
				{% assign boldskip = "skip" %}
			
		{% endif %}						  
  
	  {% unless first_char == '_' or first_char=='_boldOptionLocalStorageId' or bold_option.first == 'master_builder' or bold_option.first == 'builder_id' or bold_option.first == '_boldOptionLocalStorageId' or  bold_option.first == 'builder_info' or bold_option.last == "" or opt_desc == "Standard Sprinkles/Toppings" or opt_title == "Accessory" or boldskip == "skip" %} 
			{% assign bldop = 1 %}
			{% assign boldskip = "" %}						  

			<!--BOLD CUSTOM DESCRIPTIONS-->		  
		   {% if opt_title contains "Card Message:" %}
				{% assign presym = " :!: " %}
				{% assign postsym = " :!:" %}
				{% assign lq2 = lq %}
				{% assign postsym2 = ":!:" %}
				{% assign hascard = "card" %}
				{% assign crtitemhascard = "card" %}
						  
		{% if sku == "RECN-4199" %}	 
				{% else %}
					{% assign cnt_varcard = 0 %}
					{% assign cnt_varcard = 1 | times: lq %}					
					{% assign cnt_card = cnt_card | plus: cnt_varcard %}
				{% endif %}

		  {% elsif opt_title == "Recipient(s) Name(s):" %}
			{% assign presym = " :!: " %}
			{% assign postsym = " :!:" %}
			{% assign brdr1 = "<br/><span style='border-style: dotted;'>" %}
			{% assign brdr2 = "</span>" %}

		  {% elsif opt_title contains "Upload" %}
			{% assign presym = " :+:" %}
			{% assign postsym = ":+:" %} 
			{% assign lq2 = lq %}
			{% assign postsym2 = ":+:" %}
		    {% assign imglink = opt_desc %}
						  
		  {% elsif opt_title contains "Size" %}
			{% assign cakesize = opt_desc %}

		  {% elsif opt_title contains "Greeting text" %}
			{% assign greettext = opt_desc %}
						  
					  
		  {% else %}
			{% assign presym = "" %}
			{% assign postsym = "" %}
			{% assign lq2 = "" %} 
			{% assign postsym2 = "" %}				 						  
		  {% endif %}
						  
						  
		  {% if line.title contains "Standard Cake" %}				  
						  
				{% if line.title contains "White" %}
					{% assign stdflv = "White" %}
				{% elsif line.title contains "Chocolate" %}
					{% assign stdflv = "Choc" %}
				{% elsif line.title contains "Red" %}
					{% assign stdflv = "Red" %}
				{% elsif line.title contains "Confetti" %}
					{% assign stdflv = "Conf" %}
				{% endif %}

				{% if opt_title contains "Size" %}
					{% if opt_desc contains "4 inch" %}
						{% assign stdsz = "4" %}
					{% elsif opt_desc contains "6 inch" %}
						{% assign stdsz = "6" %}
					{% elsif opt_desc contains "8 inch" %}
						{% assign stdsz = "8" %}
					{% elsif opt_desc contains "10 inch" %}
						{% assign stdsz = "10" %}						  
					{% endif %}
				{% endif %}
		  {% endif %}
										  		  

		  {% if opt_title contains "Cancellation/Changes" or opt_title contains "Lead Time" or opt_title contains "A greeting is not available on this cake" or opt_title contains "Upload an image" or opt_title contains "Design Details" or opt_title contains "Add a sprinkle border" or opt_title contains "Acknowledgement" %}
			{% assign spanadj = "<div class='smltxt'>" %}
			{% assign spanadjend = "</div>" %}
			{% assign linebreaker = "" %}
    		{% assign linebreak = -1 %}
		  {% else %}
			{% assign spanadj = "" %}
			{% assign spanadjend = "" %}	
		  {% endif %}
						  
						  
		 {% assign bords = "" %}
		 {% assign borde = "" %}
		 {% if opt_title contains "gift" %}
			{% if opt_desc contains "Standard" or opt_desc contains "Plain" %}
				{% assign gbbo = "" %} 
			{% else %}
				{% assign gbbo = "1" %} 
				{% assign bords = "<div style='border: 2px dashed  #000000; padding: 3px; margin: 2px 0;'>" %}
				{% assign borde = " </div>" %}

				{% assign cnt_vargbx = 0 %}
				{% assign cnt_vargbx = 1 | times: lq %}					
				{% assign cnt_gb = cnt_gb | plus: cnt_vargbx %}
				{% assign gb2 = "skip" %}
			{% endif %}
		  {% endif %}
			  {% comment %}	SPLIT DOZEN MINI COUNT LOOP	{% endcomment %}
						  
					{% if lpt == "Mini Cupcakes" %}
			  			{% if line.title contains "Split Dozen" or line.title contains "Choose Your Flavors"  %}

							{% if mcc-choc-array contains opt_desc %}				
								{% assign mcc_cnt_choc = 3 | times: lq | plus: mcc_cnt_choc %}
							{% elsif mcc-white-array contains opt_desc %}
						  		{% assign mcc_cnt_white = 3 | times: lq | plus: mcc_cnt_white %}
							{% elsif mcc-red-array contains opt_desc %}
						  		{% assign mcc_cnt_red = 3 | times: lq | plus: mcc_cnt_red %}
						  {% elsif mcc-banana-array contains opt_desc %}
								{% assign mcc_cnt_ban = 3 | times: lq | plus: mcc_cnt_ban %}
						  {% elsif mcc-lemon-array contains opt_desc %}
								{% assign mcc_cnt_lemon = 3 | times: lq | plus: mcc_cnt_lemon %}
							{% elsif mcc-bp-array contains opt_desc %}
								{% assign mcc_cnt_bp = 3 | times: lq | plus: mcc_cnt_bp %}
							{% elsif mcc-straw-array contains opt_desc %}
								{% assign mcc_cnt_straw = 3 | times: lq | plus: mcc_cnt_straw %}
							{% elsif mcc-pnut-array contains opt_desc %}
								{% assign mcc_cnt_pnut = 3 | times: lq | plus: mcc_cnt_pnut %}
							{% elsif mcc-pump-array contains opt_desc %}
								{% assign mcc_cnt_pump = 3 | times: lq | plus: mcc_cnt_pump %}
							{% elsif mcc-pumpchip-array contains opt_desc %}
								{% assign mcc_cnt_pumpchip = 3 | times: lq | plus: mcc_cnt_pumpchip %}
							{% elsif opt_title contains "gift" %}
			  				{% elsif opt_title contains "card" %}
			  				{% elsif opt_title contains "Card" %}
			  				{% elsif opt_title contains "Recipient(s)" %}
							{% else %}
								{% assign error_mccq = 3 | times: lq %}					
								{% assign mcc_cnt_error = mcc_cnt_error | plus: error_mccq %}
								{% assign mcc_error = "**" %}
							{% endif %}	

			  			{% endif %}	

			  		{% elsif lpt == "Gluten Free Mini Cupcakes" %}
			  			{% if line.title contains "Split Dozen" or line.title contains "Choose Your Flavors"  %}

							{% if mcc-choc-array contains opt_desc %}
						  		{% assign mcc_cnt_gfchoc = 3 | times: lq | plus: mcc_cnt_gfchoc %}
							{% elsif mcc-white-array contains opt_desc %}
						  		{% assign mcc_cnt_gfwhite = 3 | times: lq | plus: mcc_cnt_gfwhite %}
							{% elsif opt_title contains "gift" %}
			  				{% elsif opt_title contains "card" %}
			  				{% elsif opt_title contains "Card" %}
			  				{% elsif opt_title contains "Recipient(s)" %}

							{% else %}
								{% assign error_mccq = 3 | times: lq %}					
								{% assign mcc_cnt_error = mcc_cnt_error | plus: error_mccq %}
								{% assign mcc_error = "**" %}
							{% endif %}
						{% endif %}
		
			  		{% elsif lpt == "Vegan Mini Cupcakes" %}
			  	
			  			{% if line.title contains "Split Dozen" or line.title contains "Choose Your Flavors"  %}			  
							{% if mcc-choc-array contains opt_desc %}
						  		{% assign mcc_cnt_vechoc = 3 | times: lq | plus: mcc_cnt_vechoc %}
							{% elsif mcc-white-array contains opt_desc %}
						  		{% assign mcc_cnt_ve_w = 3 | times: lq | plus: mcc_cnt_ve_w %}
							{% elsif mcc-straw-array contains opt_desc %}
						  		{% assign mcc_cnt_ve_s = 3 | times: lq | plus: mcc_cnt_ve_s %}
							{% elsif opt_title contains "gift" %}
			  				{% elsif opt_title contains "card" %}
			  				{% elsif opt_title contains "Card" %}
			  				{% elsif opt_title contains "Recipient(s)" %}
							{% else %}
						  		{% assign mcc_cnt_error = 3 | times: lq | plus: mcc_cnt_error %}
								{% assign mcc_error = "**" %}
							{% endif %}
			  			{% endif %}
		  
					{% elsif line.title contains "Custom Colored Cupcakes" %}
				
						{% if opt_desc contains "12 Pack" %}
							{% assign cstmcc_cnt = "12" %}
						  	{% assign cnt_ccpk = 12 | times: lq | plus: cnt_ccpk %}	
						{% elsif opt_desc contains "6 Pack" %}
							{% assign cstmcc_cnt = "6" %}
						  	{% assign cnt_ccpk = 6 | times: lq | plus: cnt_ccpk %}	  
						{% endif %}
						 						  
						{% if opt_title contains "Cupcake Flavor" %}
							{% if line.title contains "Vegan" %}
						  		{% if opt_desc contains "Vegan Chocolate" %} 
									{% assign fcnt_vechoc = cstmcc_cnt | times: lq | plus: fcnt_vechoc %}
								{% elsif opt_desc contains "Vegan White/Vanilla" %} 
									{% assign fcnt_ve_w = cstmcc_cnt | times: lq | plus: fcnt_ve_w %}
								{% elsif opt_desc contains "Vegan Strawberry" %} 
									{% assign fcnt_ve_s = cstmcc_cnt | times: lq | plus: fcnt_ve_s %}
								{% endif %}
						  
						   {% elsif line.title contains "Gluten-Free" %}						  
								{% if opt_desc contains "Gluten-Free Chocolate" %} 
									{% assign fcnt_gfchoc = cstmcc_cnt | times: lq | plus: fcnt_gfchoc %}
								{% elsif opt_desc contains "Gluten-Free White/Vanilla" %} 
									{% assign fcnt_gfwhite = cstmcc_cnt | times: lq | plus: fcnt_gfwhite %}		
						  		{% endif %}

						  
						  	{% else %}						 						 
								{% if opt_desc contains "Chocolate" %} 
									{% assign fcnt_choc = cstmcc_cnt | times: lq | plus: fcnt_choc %}
								{% elsif opt_desc contains "White/Vanilla" %} 
									{% assign fcnt_wht = cstmcc_cnt | times: lq | plus: fcnt_wht %}	
								{% elsif opt_desc contains "Red Velvet" %} 
									{% assign fcnt_red = cstmcc_cnt | times: lq | plus: fcnt_red %}			  
								{% elsif opt_desc contains "Lemon" %} 
									{% assign fcnt_lem = cstmcc_cnt | times: lq | plus: fcnt_lem %}
								{% elsif opt_desc contains "Banana" %} 
									{% assign fcnt_ban = cstmcc_cnt | times: lq | plus: fcnt_ban %}			  
								{% elsif opt_desc contains "Butter Pecan" %} 
									{% assign fcnt_bp = cstmcc_cnt | times: lq | plus: fcnt_bp %}		  
								{% elsif opt_desc contains "Strawberry" %} 
									{% assign fcnt_stw = cstmcc_cnt | times: lq | plus: fcnt_stw %}
						  		{% endif %}
							{% endif %}	
					{% endif %}	
				{% endif %}	

				{% assign bold_options = bold_options | append: spanadj | append: linebreaker | append: brdr1 | append: bords  | append: opt_title | append: ': ' | append: presym | append: '<span style="font-weight: bold;">' | append: opt_desc | append: '</span>' | append: sizecheck | append: postsym | append: lq2 | append: postsym2 | append: mcc_error  | append: borde | append: brdr2 | append: spanadjend %}
						  


			  {% endunless%}
				  {% assign linebreak = linebreak | plus: 1 %}
		  {% endfor %}

		  {% assign bold_options = bold_options | prepend: '<span class="bold_options">' | append: "</span>" %}
		  <!--x end Bold 2 -->	  
<div style="font-size:9px;"> 
    

	{% liquid
if lpt == "Cupcakes" 
    assign cnt_varcc = 0 
    assign cnt_varcc = 1 | times: lq 					
    assign cnt_cc = cnt_cc | plus: cnt_varcc 	
    assign prefix = "CC" 				
    assign print_cc = 1 
elsif lpt == "Gluten Free Cupcakes" 
    assign cnt_vargfcc = 0 
    assign cnt_vargfcc = 1 | times: lq 					
    assign cnt_gfcc = cnt_gfcc | plus: cnt_vargfcc 
    assign prefix = "GFCC" 						
    assign print_cc = 1 
elsif lpt == "Vegan Cupcakes" 
    assign cnt_varvecc = 0 
    assign cnt_varvecc = 1 | times: lq 					
    assign cnt_vecc = cnt_vecc | plus: cnt_varvecc 
    assign prefix = "VECC" 						
    assign print_cc = 1 
elsif lpt == "Cupcake Packs" 
    assign prefix = "CCPK" 
    assign print_cc = 1 	
    if line.title contains "Birthday Pack" 																	
        assign fcnt_choc = 1 | times: lq | plus: fcnt_choc 
        assign fcnt_wht = 2 | times: lq | plus: fcnt_wht 
        assign fcnt_red = 1 | times: lq | plus: fcnt_red 				
        assign cnt_ccpk = 4 | times: lq | plus: cnt_ccpk 	

    elsif line.title contains "Yummy Discovery" 	
        assign fcnt_lem = 1 | times: lq | plus: fcnt_lem 
        assign fcnt_ban = 1 | times: lq | plus: fcnt_ban 
        assign fcnt_stw = 1 | times: lq | plus: fcnt_stw 
        assign fcnt_bp = 1 | times: lq | plus: fcnt_bp 
        assign cnt_ccpk = 4 | times: lq | plus: cnt_ccpk 		

    elsif line.title contains "Variety" 
        assign fcnt_choc = 1 | times: lq | plus: fcnt_choc 
        assign fcnt_wht = 1 | times: lq | plus: fcnt_wht 
        assign fcnt_red = 1 | times: lq | plus: fcnt_red 
        assign fcnt_stw = 1 | times: lq | plus: fcnt_stw 
        assign cnt_ccpk = 4 | times: lq | plus: cnt_ccpk 	

    elsif line.title contains "Simple and Delicious" 
        assign fcnt_choc = 2 | times: lq | plus: fcnt_choc 
        assign fcnt_wht = 2 | times: lq | plus: fcnt_wht 
        assign fcnt_red = 1 | times: lq | plus: fcnt_red 
        assign fcnt_ban = 1 | times: lq | plus: fcnt_ban 
        assign cnt_ccpk = 6 | times: lq | plus: cnt_ccpk 	

    elsif line.title contains "Bake My Day" 
        assign fcnt_choc = 1 | times: lq | plus: fcnt_choc 
        assign fcnt_wht = 1 | times: lq | plus: fcnt_wht 
        assign fcnt_red = 1 | times: lq | plus: fcnt_red 
        assign fcnt_ban = 1 | times: lq | plus: fcnt_ban 
        assign fcnt_stw = 1 | times: lq | plus: fcnt_stw 
        assign fcnt_bp = 1 | times: lq | plus: fcnt_bp 
        assign cnt_ccpk = 6 | times: lq | plus: cnt_ccpk 	

    elsif line.title contains "Smooth and Tasty" 
        assign fcnt_choc = 1 | times: lq | plus: fcnt_choc 
        assign fcnt_wht = 2 | times: lq | plus: fcnt_wht 
        assign fcnt_lem = 1 | times: lq | plus: fcnt_lem 
        assign fcnt_ban = 1 | times: lq | plus: fcnt_ban 
        assign fcnt_stw = 1 | times: lq | plus: fcnt_stw 
        assign cnt_ccpk = 6 | times: lq | plus: cnt_ccpk 	

    elsif line.title contains "OH-EM-GEE" 	
        assign fcnt_choc = 1 | times: lq | plus: fcnt_choc 
        assign fcnt_wht = 3 | times: lq | plus: fcnt_wht 
        assign fcnt_red = 1 | times: lq | plus: fcnt_red 
        assign fcnt_lem = 2 | times: lq | plus: fcnt_lem 
        assign fcnt_ban = 2 | times: lq | plus: fcnt_ban 
        assign fcnt_stw = 1 | times: lq | plus: fcnt_stw 
        assign fcnt_bp = 2 | times: lq | plus: fcnt_bp 
        assign cnt_ccpk = 12 | times: lq | plus: cnt_ccpk 	

    elsif line.title contains "Filling Delight" 
        assign fcnt_wht = 5 | times: lq | plus: fcnt_wht 
        assign fcnt_lem = 2 | times: lq | plus: fcnt_lem 
        assign fcnt_ban = 2 | times: lq | plus: fcnt_ban 
        assign fcnt_stw = 1 | times: lq | plus: fcnt_stw 
        assign fcnt_bp = 2 | times: lq | plus: fcnt_bp 
        assign cnt_ccpk = 12 | times: lq | plus: cnt_ccpk 	    

    elsif line.title contains "Belly" 	
        assign fcnt_choc = 2 | times: lq | plus: fcnt_choc 
        assign fcnt_wht = 3 | times: lq | plus: fcnt_wht 
        assign fcnt_red = 1 | times: lq | plus: fcnt_red 
        assign fcnt_lem = 2 | times: lq | plus: fcnt_lem 
        assign fcnt_ban = 2 | times: lq | plus: fcnt_ban 
        assign fcnt_stw = 1 | times: lq | plus: fcnt_stw 
        assign fcnt_bp = 1 | times: lq | plus: fcnt_bp 
        assign cnt_ccpk = 12 | times: lq | plus: cnt_ccpk 	

    elsif line.title contains "Instant Party Pack" 
        assign fcnt_choc = 8 | times: lq | plus: fcnt_choc 
        assign fcnt_wht = 8 | times: lq | plus: fcnt_wht 
        assign fcnt_red = 4 | times: lq | plus: fcnt_red 
        assign fcnt_lem = 4 | times: lq | plus: fcnt_lem 
        assign fcnt_ban = 4 | times: lq | plus: fcnt_ban 
        assign fcnt_stw = 4 | times: lq | plus: fcnt_stw 
        assign fcnt_bp = 4 | times: lq | plus: fcnt_bp 
        assign cnt_ccpk = 36 | times: lq | plus: cnt_ccpk 	

    elsif line.title contains "Going Big Party Pack" 
        assign fcnt_choc = 12 | times: lq | plus: fcnt_choc 
        assign fcnt_wht = 14 | times: lq | plus: fcnt_wht 
        assign fcnt_red = 6 | times: lq | plus: fcnt_red 
        assign fcnt_lem = 6 | times: lq | plus: fcnt_lem 
        assign fcnt_ban = 8 | times: lq | plus: fcnt_ban 
        assign fcnt_stw = 8 | times: lq | plus: fcnt_stw 
        assign fcnt_bp = 6 | times: lq | plus: fcnt_bp 
        assign cnt_ccpk = 60 | times: lq | plus: cnt_ccpk 	

    elsif line.title contains "Going Huge Party Pack" 
        assign fcnt_choc = 21 | times: lq | plus: fcnt_choc 
        assign fcnt_wht = 24 | times: lq | plus: fcnt_wht 
        assign fcnt_red = 9 | times: lq | plus: fcnt_red 
        assign fcnt_lem = 12 | times: lq | plus: fcnt_lem 
        assign fcnt_ban = 12 | times: lq | plus: fcnt_ban 
        assign fcnt_stw = 9 | times: lq | plus: fcnt_stw 
        assign fcnt_bp = 9 | times: lq | plus: fcnt_bp 	
        assign cnt_ccpk = 96 | times: lq | plus: cnt_ccpk 	

    # GENDER REVEAL
    elsif sku == "CCPK-1154" 
        assign fcnt_choc = 12 | times: lq | plus: fcnt_choc 
        assign cnt_ccpk = 12 | times: lq | plus: cnt_ccpk 	

    elsif sku == "CCPK-1152" 
        assign fcnt_wht = 12 | times: lq | plus: fcnt_wht 	
        assign cnt_ccpk = 12 | times: lq | plus: cnt_ccpk 	

    elsif sku == "CCPK-1151" 
        assign fcnt_choc = 6 | times: lq | plus: fcnt_choc 
        assign cnt_ccpk = 6 | times: lq | plus: cnt_ccpk 	

    elsif sku == "CCPK-1150" 
        assign fcnt_wht = 6 | times: lq | plus: fcnt_wht 		
        assign cnt_ccpk = 6 | times: lq | plus: cnt_ccpk 	

    elsif line.title contains "Custom Colored Cupcakes" 
    # SEE ABOVE - BOLD
    else 
            assign cc_pack_error = "+ ERROR show Philip" 
    endif	

elsif lpt == "Mini Cupcake Packs" 
	 assign prefix = "MCCPK" 
	 assign print_cc = 1 	

	 if line.title contains "Mini Fun Pack" 
		 assign choc_mccq = 3 | times: lq 					
		 assign mcc_cnt_choc = mcc_cnt_choc | plus: choc_mccq 	
		 assign white_mccq = 3 | times: lq 					
		 assign mcc_cnt_white = mcc_cnt_white | plus: white_mccq 	
		 assign red_mccq = 3 | times: lq 					
		 assign mcc_cnt_red = mcc_cnt_red | plus: red_mccq 
		 assign bp_mccq = 3 | times: lq 					
		 assign mcc_cnt_bp = mcc_cnt_bp | plus: bp_mccq 
		 assign cc_cntr = 12 | times: lq 					
		 assign cnt_mccpk = cnt_mccpk | plus: cc_cntr 	

	 elsif line.title contains "Mini Birthday Pack" 
		 assign choc_mccq = 3 | times: lq 					
		 assign mcc_cnt_choc = mcc_cnt_choc | plus: choc_mccq 	
		 assign white_mccq = 6 | times: lq 					
		 assign mcc_cnt_white = mcc_cnt_white | plus: white_mccq 	
		 assign red_mccq = 3 | times: lq 					
		 assign mcc_cnt_red = mcc_cnt_red | plus: red_mccq 
		 assign cc_cntr = 12 | times: lq 					
		 assign cnt_mccpk = cnt_mccpk | plus: cc_cntr 					

	 elsif line.title contains "Mini Smiles Pack" 	
		 assign choc_mccq = 6 | times: lq 					
		 assign mcc_cnt_choc = mcc_cnt_choc | plus: choc_mccq 	
		 assign white_mccq = 6 | times: lq 					
		 assign mcc_cnt_white = mcc_cnt_white | plus: white_mccq 	
		 assign red_mccq = 3 | times: lq 					
		 assign mcc_cnt_red = mcc_cnt_red | plus: red_mccq 
		 assign lemon_mccq = 3 | times: lq 					
		 assign mcc_cnt_lemon = mcc_cnt_lemon | plus: lemon_mccq 
		 assign bp_mccq = 3 | times: lq 					
		 assign mcc_cnt_bp = mcc_cnt_bp | plus: bp_mccq 
		 assign straw_mccq = 3 | times: lq 					
		 assign mcc_cnt_straw = mcc_cnt_straw | plus: straw_mccq 	
		 assign cc_cntr = 24 | times: lq 					
		 assign cnt_mccpk = cnt_mccpk | plus: cc_cntr 					

	 elsif line.title contains "Mini Awesome Pack" 	
		 assign choc_mccq = 6 | times: lq 					
		 assign mcc_cnt_choc = mcc_cnt_choc | plus: choc_mccq 	
		 assign white_mccq = 6 | times: lq 					
		 assign mcc_cnt_white = mcc_cnt_white | plus: white_mccq 	
		 assign red_mccq = 3 | times: lq 					
		 assign mcc_cnt_red = mcc_cnt_red | plus: red_mccq 
		 assign lemon_mccq = 3 | times: lq 					
		 assign mcc_cnt_lemon = mcc_cnt_lemon | plus: lemon_mccq 
		 assign bp_mccq = 3 | times: lq 					
		 assign mcc_cnt_bp = mcc_cnt_bp | plus: bp_mccq 
		 assign straw_mccq = 3 | times: lq 					
		 assign mcc_cnt_straw = mcc_cnt_straw | plus: straw_mccq 
		 assign cc_cntr = 24 | times: lq 					
		 assign cnt_mccpk = cnt_mccpk | plus: cc_cntr 					

	 elsif line.title contains "Mini Rad Pack" 	
		 assign choc_mccq = 12 | times: lq 					
		 assign mcc_cnt_choc = mcc_cnt_choc | plus: choc_mccq 	
		 assign white_mccq = 12 | times: lq 					
		 assign mcc_cnt_white = mcc_cnt_white | plus: white_mccq 	
		 assign red_mccq = 6 | times: lq 					
		 assign mcc_cnt_red = mcc_cnt_red | plus: red_mccq 
		 assign banana_mccq = 6 | times: lq 					
		 assign mcc_cnt_ban = mcc_cnt_ban | plus: banana_mccq 
		 assign lemon_mccq = 6 | times: lq 					
		 assign mcc_cnt_lemon = mcc_cnt_lemon | plus: lemon_mccq 
		 assign bp_mccq = 6 | times: lq 					
		 assign mcc_cnt_bp = mcc_cnt_bp | plus: bp_mccq 
		 assign cc_cntr = 48 | times: lq 					
		 assign cnt_mccpk = cnt_mccpk | plus: cc_cntr 					

	 elsif line.title contains "Mini Delicious Pack" 						
		 assign choc_mccq = 12 | times: lq 					
		 assign mcc_cnt_choc = mcc_cnt_choc | plus: choc_mccq 	
		 assign white_mccq = 12 | times: lq 					
		 assign mcc_cnt_white = mcc_cnt_white | plus: white_mccq 	
		 assign red_mccq = 6 | times: lq 					
		 assign mcc_cnt_red = mcc_cnt_red | plus: red_mccq 
		 assign banana_mccq = 6 | times: lq 					
		 assign mcc_cnt_ban = mcc_cnt_ban | plus: banana_mccq 
		 assign bp_mccq = 6 | times: lq 					
		 assign mcc_cnt_bp = mcc_cnt_bp | plus: bp_mccq 
		 assign straw_mccq = 6 | times: lq 					
		 assign mcc_cnt_straw = mcc_cnt_straw | plus: straw_mccq 
		 assign cc_cntr = 48 | times: lq 					
		 assign cnt_mccpk = cnt_mccpk | plus: cc_cntr 					

	 elsif line.title contains "Mini Sweet Pack" 	
		 assign choc_mccq = 24 | times: lq 					
		 assign mcc_cnt_choc = mcc_cnt_choc | plus: choc_mccq 	
		 assign white_mccq = 24 | times: lq 					
		 assign mcc_cnt_white = mcc_cnt_white | plus: white_mccq 	
		 assign red_mccq = 12 | times: lq 					
		 assign mcc_cnt_red = mcc_cnt_red | plus: red_mccq 
		 assign banana_mccq = 12 | times: lq 					
		 assign mcc_cnt_ban = mcc_cnt_ban | plus: banana_mccq 
		 assign bp_mccq = 12 | times: lq 					
		 assign mcc_cnt_bp = mcc_cnt_bp | plus: bp_mccq 
		 assign straw_mccq = 12 | times: lq 					
		 assign mcc_cnt_straw = mcc_cnt_straw | plus: straw_mccq 
		 assign cc_cntr = 96 | times: lq 					
		 assign cnt_mccpk = cnt_mccpk | plus: cc_cntr 					

	 elsif line.title contains "Mini Super Pack" 						
		 assign choc_mccq = 36 | times: lq 					
		 assign mcc_cnt_choc = mcc_cnt_choc | plus: choc_mccq 	
		 assign white_mccq = 48 | times: lq 					
		 assign mcc_cnt_white = mcc_cnt_white | plus: white_mccq 	
		 assign red_mccq = 24 | times: lq 					
		 assign mcc_cnt_red = mcc_cnt_red | plus: red_mccq 
		 assign banana_mccq = 24 | times: lq 					
		 assign mcc_cnt_ban = mcc_cnt_ban | plus: banana_mccq 
		 assign lemon_mccq = 24 | times: lq 					
		 assign mcc_cnt_lemon = mcc_cnt_lemon | plus: lemon_mccq 
		 assign bp_mccq = 24 | times: lq 					
		 assign mcc_cnt_bp = mcc_cnt_bp | plus: bp_mccq 
		 assign straw_mccq = 12 | times: lq 					
		 assign mcc_cnt_straw = mcc_cnt_straw | plus: straw_mccq 
		 assign cc_cntr = 192 | times: lq 					
		 assign cnt_mccpk = cnt_mccpk | plus: cc_cntr 					

	 elsif line.title contains "Mini Mega Pack" 	
		 assign choc_mccq = 72 | times: lq 					
		 assign mcc_cnt_choc = mcc_cnt_choc | plus: choc_mccq 	
		 assign white_mccq = 72 | times: lq 					
		 assign mcc_cnt_white = mcc_cnt_white | plus: white_mccq 	
		 assign red_mccq = 18 | times: lq 					
		 assign mcc_cnt_red = mcc_cnt_red | plus: red_mccq 
		 assign banana_mccq = 36 | times: lq 					
		 assign mcc_cnt_ban = mcc_cnt_ban | plus: banana_mccq 
		 assign lemon_mccq = 36 | times: lq 					
		 assign mcc_cnt_lemon = mcc_cnt_lemon | plus: lemon_mccq 
		 assign bp_mccq = 36 | times: lq 					
		 assign mcc_cnt_bp = mcc_cnt_bp | plus: bp_mccq 
		 assign straw_mccq = 30 | times: lq 					
		 assign mcc_cnt_straw = mcc_cnt_straw | plus: straw_mccq 
		 assign cc_cntr = 300 | times: lq 					
		 assign cnt_mccpk = cnt_mccpk | plus: cc_cntr 	

    else 
            assign mcc_pack_error = "+ ERROR show Philip" 
    endif 	

 elsif lpt == "Mini Cupcakes" 	
	 assign cnt_varmcc = 0 
	 if mccdzn-choc-array contains sku 
		 assign choc_mccq = 12 | times: lq 					
		 assign mcc_cnt_choc = mcc_cnt_choc | plus: choc_mccq 
		 assign cnt_varmcc = 12 | times: lq 	
	 elsif mccdzn-white-array contains sku 
		 assign white_mccq = 12 | times: lq 					
		 assign mcc_cnt_white = mcc_cnt_white | plus: white_mccq 
		 assign cnt_varmcc = 12 | times: lq 	
	 elsif mccdzn-red-array contains sku 
		 assign red_mccq = 12 | times: lq 					
		 assign mcc_cnt_red = mcc_cnt_red | plus: red_mccq 
		 assign cnt_varmcc = 12 | times: lq 	
	 elsif mccdzn-banana-array contains sku 
		 assign banana_mccq = 12 | times: lq 					
		 assign mcc_cnt_ban = mcc_cnt_ban | plus: banana_mccq 
		 assign cnt_varmcc = 12 | times: lq 	
	 elsif mccdzn-lemon-array contains sku 
		 assign lemon_mccq = 12 | times: lq 					
		 assign mcc_cnt_lemon = mcc_cnt_lemon | plus: lemon_mccq 
		 assign cnt_varmcc = 12 | times: lq 	
	 elsif mccdzn-bp-array contains sku 
		 assign bp_mccq = 12 | times: lq 					
		 assign mcc_cnt_bp = mcc_cnt_bp | plus: bp_mccq 
		 assign cnt_varmcc = 12 | times: lq 
	 elsif mccdzn-straw-array contains sku 
		 assign straw_mccq = 12 | times: lq 					
		 assign mcc_cnt_straw = mcc_cnt_straw | plus: straw_mccq 
		 assign cnt_varmcc = 12 | times: lq 	
	 elsif mccdzn-pnut-array contains sku 
		 assign pnut_mccq = 12 | times: lq 					
		 assign mcc_cnt_pnut = mcc_cnt_pnut | plus: pnut_mccq 
		 assign cnt_varmcc = 12 | times: lq 	
	 elsif mccdzn-pump-array contains sku 
		 assign pump_mccq = 12 | times: lq 					
		 assign mcc_cnt_pump = mcc_cnt_pump | plus: pump_mccq 
		 assign cnt_varmcc = 12 | times: lq 	
	 elsif mccdzn-pumpchip-array contains sku 
		 assign pumpchip_mccq = 12 | times: lq 					
		 assign mcc_cnt_pumpchip = mcc_cnt_pumpchip | plus: pumpchip_mccq 
		 assign cnt_varmcc = 12 | times: lq 	
	 elsif mccdzn-stdcstm-array contains sku 
		 assign stdcstm_mccq = 12 | times: lq 					
		 assign mcc_cnt_stdcstm = mcc_cnt_stdcstm | plus: stdcstmmcc_quan 
		 assign cnt_varmcc = 12 | times: lq 	
	 elsif line.title contains "Split Dozen" or line.title contains "Choose Your Flavors"  
		 assign cnt_varmcc = 12 | times: lq 		
	 else 
		 assign error_mccq = 12 | times: lq 					
		 assign mcc_cnt_error = mcc_cnt_error | plus: error_mccq 
		 assign cnt_varmcc = 12 | times: lq 	
	 endif 	

	 assign cnt_mcc = cnt_mcc | plus: cnt_varmcc 	
	 assign prefix = "MCC" 
	 assign print_cc = 1 	

elsif lpt == "Gluten Free Mini Cupcakes" 
	 assign cnt_vargfmcc = 0 

	if mccdzn-gfchoc-array contains sku
		 assign gfchoc_mccq = 12 | times: lq
		 assign mcc_cnt_gfchoc = mcc_cnt_gfchoc | plus: gfchoc_mccq
		 assign cnt_vargfmcc = 12 | times: lq
    elsif mccdzn-gfwhite-array contains sku
		 assign gfwhite_mccq = 12 | times: lq 					
		 assign mcc_cnt_gfwhite = mcc_cnt_gfwhite | plus: gfwhite_mccq 
		 assign cnt_vargfmcc = 12 | times: lq 	
	elsif mccdzn-gfcstm-array contains sku 
		 assign gfcstm_mccq = 12 | times: lq 					
		 assign mcc_cnt_gfcstm = mcc_cnt_gfcstm | plus: gfcstmmcc_quan 
		 assign cnt_vargfmcc = 12 | times: lq 	
	 elsif line.title contains "Split Dozen" or line.title contains "Choose Your Flavors"  
		 assign cnt_vargfmcc = 12 | times: lq 
	 else 
		 assign error_gfmcc_quan = 12 | times: lq 					
		 assign mcc_cnt_error = mcc_cnt_error | plus: error_mccq 
		 assign cnt_vargfmcc = 12 | times: lq 	
	 endif 

	 assign cnt_gfmcc = cnt_gfmcc | plus: cnt_vargfmcc 
	 assign prefix = "GFMCC" 
	 assign print_cc = 1 

elsif lpt == "Vegan Mini Cupcakes" 
		 assign cnt_varvemcc = 0 
	 if mccdzn-vechoc-array contains sku 
		 assign vechoc_mccq = 12 | times: lq 					
		 assign mcc_cnt_vechoc = mcc_cnt_vechoc | plus: vechoc_mccq 
		 assign cnt_varvemcc = 12 | times: lq  	
	 elsif mccdzn-ve_w-array contains sku 
		 assign ve_w_mccq = 12 | times: lq 					
		 assign mcc_cnt_ve_w = mcc_cnt_ve_w | plus: ve_w_mccq 
		 assign cnt_varvemcc = 12 | times: lq  	
	 elsif mccdzn-ve_s-array contains sku 
		 assign ve_s_mccq = 12 | times: lq 					
		 assign mcc_cnt_ve_s = mcc_cnt_ve_s | plus: ve_s_mccq 
		 assign cnt_varvemcc = 12 | times: lq  	
	 elsif mccdzn-vecstm-array contains sku 
		 assign vecstm_mccq = 12 | times: lq 					
		 assign mcc_cnt_vecstm = mcc_cnt_vecstm | plus: vecstmmcc_quan 
		 assign cnt_varvemcc = 12 | times: lq  	
	 elsif line.title contains "Split Dozen" or line.title contains "Choose Your Flavors"  
		 assign cnt_varvemcc = 12 | times: lq 	
	 else 
		 assign error_mccq = 12 | times: lq 					
		 assign mcc_cnt_error = mcc_cnt_error | plus: error_mccq 
		 assign cnt_varvemcc = 12 | times: lq  	
	 endif 			

	 assign cnt_vemcc = cnt_vemcc | plus: cnt_varvemcc 
	 assign prefix = "VEMCC" 
	 assign print_cc = 1 

elsif lpt == "Cookie Packs" 
	 assign cnt_varco = 0 
	 assign prefix = "COPK" 
	 assign print_co = 1 	

	 if line.title contains "Cookie 4 Pack" 							
		 assign cnt_co = 4 | times: lq | plus: cnt_co 	
	 elsif line.title contains "Cookie 12 Pack" 
		 assign cnt_co = 12 | times: lq | plus: cnt_co 	
	 elsif line.title contains "Cookie 18 Pack" 
		 assign cnt_co = 18 | times: lq | plus: cnt_co 	
	 elsif line.title contains "Cookie 36 Pack" 
		 assign cnt_co = 36 | times: lq | plus: cnt_co 	
	 endif 	

elsif lpt == "Cake Ball Packs" 
	 assign cnt_varcb = 0 
	 assign prefix = "CBPK" 
	 assign print_cb = 1 	

	 if line.title contains "Cake Ball 12 Pack" 	
		 assign cnt_cb = 12 | times: lq | plus: cnt_cb 	
		 assign print_cb = 1 
	 elsif line.title contains "Cake Ball 25 Pack" 
		 assign cnt_cb = 24 | times: lq | plus: cnt_cb 
		 assign print_cb = 1 
	 elsif line.title contains "Cake Ball 36 Pack" 
		 assign cnt_cb = 36 | times: lq | plus: cnt_cb 
		 assign print_cb = 1 
	 elsif line.title contains "Cake Ball 6 Pack" 
		 assign cnt_cb = 6 | times: lq | plus: cnt_cb 
		 assign print_cb = 1 	
	 endif 									

elsif lpt == "Cookies" 
	 assign cnt_co = 1 | times: lq | plus: cnt_co 
	 assign prefix = "CO" 
	 assign print_co = 1 

elsif lpt == "Cake Balls" 
	 assign cnt_cb = 1 | times: lq | plus: cnt_cb 
	 assign prefix = "CB" 
	 assign print_cb = 1 

elsif lpt == "Standard Cakes" 
	 assign prefix = "CK" 
	 assign cnt_ck = 1 | times: lq | plus: cnt_ck 
	 assign print_stndck = 1 
	 # capture stdck  :%:{{stdsz}}:%:{{stdflv}}:%:{{lq}}:%: endcapture 
     assign stdck = ":%:" | append: stdsz | append: ":%:" | append: stdflv | append: ":%:" | append: lq | append: ":%:"

elsif lpt == "Semi Custom Cakes"
	 assign prefix = "CK" 				
	 assign cnt_ck = 1 | times: lq | plus: cnt_ck 
	 assign print_ck = 1 
	
elsif lpt == "Cakes - Semi Custom" 
	 assign prefix = "CK" 	
	 assign cnt_ck = 1 | times: lq | plus: cnt_ck 
	 assign print_ck = 1 	
	
elsif lpt == "Custom Cakes" 
    assign prefix = "CK" 
    assign cnt_ck = 1 | times: lq | plus: cnt_ck 
    assign print_ck = 1 

elsif lpt == "Tiered Cakes" 
    assign prefix = "CK" 
    assign cnt_ck = 1 | times: lq | plus: cnt_ck 
    assign print_ck = 1 	

elsif lpt == "Cakes - Custom" 
    assign prefix = "CK" 
    assign cnt_ck = 1 | times: lq | plus: cnt_ck 
    assign print_ck = 1 

elsif sku == "RECN-4199" 
    assign prefix = "CARD" 
    assign cnt_card = 1 | times: lq | plus: cnt_card 

elsif sku == "REAS-1001" 
    assign prefix = "BX" 
    assign cnt_bx = 1 | times: lq | plus: cnt_bx 

elsif line.title contains "Gift Box" 
    assign prefix = "BOX" 
    assign gb2 = "skip" 
    assign cnt_gb = 1 | times: lq | plus: cnt_gb 

elsif lpt == "Valentine's Day" 
    assign prefix = "VD" 

    assign cnt_varvd = 0 
    assign cnt_varvd = 1 | times: lq 					
    assign cnt_vd = cnt_vd | plus: cnt_varvd 
    assign print_cb = 1 
        for tag in line.product.tags 								
            if tag == "ccpk4" 			
                assign cnt_var4 = 4 | times: lq 					
                assign cnt_ccpk = cnt_ccpk | plus: cnt_var4 
            assign print_cc = 1 	
            assign prefix = "VDCCPK" 
            endif 
        endfor 
        for tag in line.product.tags 
            if tag == "mccpk12" 																	
                assign cnt_var12 = 12 | times: lq 					
                assign cnt_mccpk = cnt_mccpk | plus: cnt_var12 	
                assign print_cc = 1 							
                assign prefix = "VDMCCPK" 
                endif 
            endfor 				
elsif line.title contains "Candles" 
	 assign prefix = "CD" 
	 assign cnt_varcd = 0 
	 assign cnt_varcd = 1 | times: lq 					
	 assign cnt_cd = cnt_cd | plus: cnt_varcd 

elsif lpt == "Topper" 
	 assign prefix = "AC" 
	 assign cnt_ac = 1 | times: lq | plus: cnt_ac 
	
elsif lpt == "Accessories" 
	 assign prefix = "AC" 
	 assign cnt_ac = 1 | times: lq | plus: cnt_ac 	
	
else 
	 assign cnt_varoth = 0 
	 assign cnt_varoth = 1 | times: lq 					
	 assign cnt_oth = cnt_oth | plus: cnt_varoth 
	 assign prefix = "OO" 
endif


# END PRODUCT IF 			
# START COUNTER 
			
	        
if line.title contains "Gift Box" and gb2 != "skip"  
    assign cnt_vargb = 0 
    assign cnt_vargb = 1 | times: lq 					
    assign cnt_gb = cnt_gb | plus: cnt_vargb 
endif 
		
assign gb2 = 0 
					
if lpt == "Cupcakes" or lpt == "Gluten Free Cupcakes" or lpt == "Vegan Cupcakes" 
    for tag in line.product.tags 
        if tag == "ccflv-choc" 
            assign fcnt_choc = 1 | times: lq | plus: fcnt_choc 
        elsif tag == "ccflv-white" 																					
            assign fcnt_wht = 1 | times: lq | plus: fcnt_wht 
        elsif tag == "ccflv-red" 										
            assign fcnt_red = 1 | times: lq | plus: fcnt_red 
        elsif tag == "ccflv-lemon" 																	
            assign fcnt_lem = 1 | times: lq | plus: fcnt_lem 
        elsif tag == "ccflv-banana" 																	
            assign fcnt_ban = 1 | times: lq | plus: fcnt_ban 
        elsif tag == "ccflv-straw" 																	
            assign fcnt_stw = 1 | times: lq | plus: fcnt_stw 
        elsif tag == "ccflv-bp" 																	
            assign fcnt_bp = 1 | times: lq | plus: fcnt_bp 
        elsif tag == "ccflv-pump" 																	
            assign fcnt_pump = 1 | times: lq | plus: fcnt_pump 						
        elsif tag == "ccflv-pumpchip" 																
            assign fcnt_pumpchip = 1 | times: lq | plus: fcnt_pumpchip 						
        elsif tag == "ccflv-gfchoc" 																	
            assign fcnt_gfchoc = 1 | times: lq | plus: fcnt_gfchoc 
        elsif tag == "ccflv-gfwhite" 																	
            assign fcnt_gfwhite = 1 | times: lq | plus: fcnt_gfwhite 	

        elsif tag == "ccflv-vechoc" 																	
            assign fcnt_vechoc = 1 | times: lq | plus: fcnt_vechoc 	
        elsif tag == "ccflv-vewhite" 																	
            assign fcnt_ve_w = 1 | times: lq | plus: fcnt_ve_w 		
        elsif tag == "ccflv-vestraw" 																	
            assign fcnt_ve_s = 1 | times: lq | plus: fcnt_ve_s 		
        endif 
    endfor 
 endif 

assign gbox1 = ""

if line.title contains ":|:"
    assign gbox1 = "border: 2px dashed  #000000; padding: 3px; margin: 2px 0;"
endif

%}
</div>	
						  
						  

<!-- collapse -->
			  
	{% if lpt != ty %}
		<tr class="bb">
			<td class="bb f12 p3">&nbsp;</td><td colspan="3" class="f12 p3 bb">\\ {{lpt}} \\</td>
		</tr>
		{% assign ty = lpt %}
	{% else %}
		{% assign ty = lpt %}
	{% endif %}
	
		<tr class="bb">		
					
			{% if bldop == 0 %}
				<td class="txtc bld p3 bb"> {{ lq }}</td>
				<td class="linetr p3 bb"> 
					<div class="bld" style="{{ gbox1 }}">{{ prefix }}:  {{ line.title | replace: " - Default Title", "" }} </div>
					<div style="padding-left: 15px;">
						<div class="f15 boldo">{{ bold_options }} 
						{% if stdck %} <div class="f6"> {{stdck}}</div> {% endif %}</div>
						
						
					 </div>
			 	 </td>		
			{% else %}
				<td colspan="2">
					<table width="100%" border="0">
					  <tbody>
						 {% if line.title contains ":|:" or gbbo == "1" %} 
							<tr class="bb">
								<td width="6%" class="txtc bld p3 bb"> {{ lq }}</td>
								<td width="94%" class="bld p3 bb">GIFT BOX!  &dArr; &dArr;</td>
							 </tr>
						{% endif %}
						<tr>
							<td width="6%" class="txtc bld bb p3">{{ lq }}</td>
							<td width="94%" class="linetr p3 bb"> 
								<div class="bld" style="{{ gbox1 }}">{{ prefix }}: {{ line.title | replace: " - Default Title", "" }}</div>
								<div style="padding-left: 15px;">
									<div class=" f15 boldo">{{ bold_options }} {% if stdck %} <div class="f6"> {{stdck}}</div> {% endif %}</div>
									 {% if imglink != "" %}<div class="f6 boldo">:,:{{imglink}}:,:{{cakesize}}:,:{{lq}}:,:{{greetsel}}:,:{{greettext}}:,:{{ line.title }}:,:</div>{% endif %}
								</div>
							</td>
						</tr>
					  </tbody>
					</table>
			  </td>
			{% endif %}
			<td class="txtr bb p3">
			  {% if line.variant.price > line.price %}
			  {% assign original_price = line.variant.price %}
			  {% elsif line.variant.compare_at_price > line.price %}
			  {% assign original_price = line.variant.compare_at_price %}
			  {% else %}
			  {% assign original_price = 0 %}
			  {% endif %}
			  {% if original_price > 0 %}<s>{{ original_price | money }}</s> {% endif %}
			  {{ bold_item_price | money }} </td>
			<td class="txtr bld bb p3">{{ bold_line_price | money }}</td>
		  </tr> 
						 
		{% if crtitemhascard == "card" and sku != "RECN-4199" %}
			<tr class="bb">
				<td class="txtc bld p3 bb">{{ lq }}</td>
				<td class="bld p3 bb"> CARD &uArr; &uArr;</td>
				<td colspan="2">&nbsp;</td>
			</tr>
			{% endif %}		  
					  
		  {% endfor %}
		</table>
	</div>
		</td>
	  </tr>
	   {% if discounts %}
			  {% capture discount_title %}Discount {% if discounts.first.code %}({{ discounts.first.code }}){% endif %}{% endcapture %}
			  {% else %}
			  {% assign discount_title = 'Discount' %}
			   {% endif %}
		<tr>	
			<td colspan="2" class="txtr p8">
				<span class="m4"><span class="f12">{{ discount_title }}:</span>  {{ discounts_savings | money }}</span>
				<span class="m4"><span class="f12">Subtotal:</span> {{ subtotal_price | money }}</span>             
				<span class="m4"><span class="f12">{{ shipping_method.title }}</span>  {{ shipping_price | money }}</span>
				 	{% for line in tax_lines %}
						<span class="m4"><span class="f12">Tax ({{ line.title }}):</span> {{ line.price | money }}</span>
					{% endfor %}
				<span class="m4"><span class="f12">Total:</span> {{ total_price | money }}</span>
			</td>
		</tr>

	</table>

	{% if cnt_cc > 0 or cnt_gfcc > 0 or cnt_vecc > 0 or cnt_ccpk > 0  %}
	 <div class="b9 f18 m0 mb">
		&nbsp;CC FLVRS:

		 {% if fcnt_choc > 0 %}
			 | CHOC: {{ fcnt_choc }}
		{% endif %}	 
		{% if fcnt_wht > 0 %}
			 | WHT: {{ fcnt_wht }}
		{% endif %}	 		 
		{% if fcnt_red > 0 %}
			 | RED: {{ fcnt_red }}
		{% endif %}
		{% if fcnt_lem > 0 %}
			 | LEM: {{ fcnt_lem }}
		{% endif %}	 
		{% if fcnt_ban > 0 %}
			 | BAN: {{ fcnt_ban }}
		{% endif %}	 		 
		{% if fcnt_stw > 0 %}
			 | STRW: {{ fcnt_stw }}
		{% endif %}	 		 
		{% if fcnt_bp > 0 %}
			 | BP: {{ fcnt_bp }}
		{% endif %}
		{% if fcnt_pump > 0 %}
			 | PKN: {{ fcnt_pump }}
		{% endif %}			 
		{% if fcnt_pumpchip > 0 %}
			 | PCHP: {{ fcnt_pumpchip }}
		{% endif %}				 
		{% if fcnt_gfchoc > 0 %}
			 | GF CHOC: {{ fcnt_gfchoc }}
		{% endif %}	 
		{% if fcnt_gfwhite > 0 %}
			 | GF WHT: {{ fcnt_gfwhite }}
		{% endif %}	
		{% if fcnt_vechoc > 0 %}
			 | VE CHOC: {{ fcnt_vechoc }}
		{% endif %}	 
		{% if fcnt_ve_w > 0 %}
			 | VE WHT: {{ fcnt_ve_w }}
		{% endif %}			 
		{% if fcnt_ve_s > 0 %}
			 | VE STRW: {{ fcnt_ve_s }}
		{% endif %}	 
		 {% if cc_pack_error %}
			 | {{ cc_pack_error }}
		{% endif %}			 
	&nbsp;</div>
{% endif %}	 

	{% if cnt_mcc > 0 or cnt_mccpk > 0 or cnt_gfmcc > 0 or cnt_vemcc > 0 %}
	 <div class="b9 f18 mb">
		&nbsp;MCC FLVRS:

		{% if mcc_cnt_choc > 0  %} | CHOC: {{ mcc_cnt_choc }}{% endif %}
		{% if mcc_cnt_white > 0  %} | WHT: {{ mcc_cnt_white }}{% endif %}
		{% if mcc_cnt_red > 0  %} | RED: {{ mcc_cnt_red }}{% endif %}
		{% if mcc_cnt_lemon > 0  %} | LEM: {{ mcc_cnt_lemon }}{% endif %}
		{% if mcc_cnt_ban > 0  %} | BAN: {{ mcc_cnt_ban }}{% endif %}
		{% if mcc_cnt_straw > 0  %} | STRW: {{ mcc_cnt_straw }}{% endif %}
		{% if mcc_cnt_bp > 0  %} | BP: {{ mcc_cnt_bp }}{% endif %}
		{% if mcc_cnt_gfchoc > 0  %} | GF CHOC: {{ mcc_cnt_gfchoc }}{% endif %}
		{% if mcc_cnt_gfwhite > 0  %} | GF WHT: {{ mcc_cnt_gfwhite }}{% endif %}
		{% if mcc_cnt_vechoc > 0  %} | VE CHOC: {{ mcc_cnt_vechoc }}{% endif %}
		{% if mcc_cnt_ve_w > 0  %} | VE WHT: {{ mcc_cnt_ve_w }}{% endif %}
		{% if mcc_cnt_ve_s > 0  %} | VE STRW: {{ mcc_cnt_ve_s }}{% endif %}
		{% if mcc_cnt_stdcstm > 0  %} | CSTM: {{ mcc_cnt_stdcstm }}{% endif %}
		{% if mcc_cnt_gfcstm > 0  %} | GFCSTM: {{ mcc_cnt_gfcstm }}{% endif %}
		{% if mcc_cnt_vecstm > 0  %} | VECSTM: {{ mcc_cnt_vecstm }}{% endif %}			 
		{% if mcc_cnt_error > 0  %} | ERROR: {{ mcc_cnt_error }}{% endif %}
		{% if mcc_pack_error %} | {{ mcc_pack_error }}
		{% endif %}	
	&nbsp;</div>
{% endif %}	 

	<div class="mb checks">
		<span>TOTAL: {{ cnt_cc | plus: cnt_ccpk | plus: cnt_mccpk | plus: cnt_mcc | plus: cnt_gfcc | plus: cnt_vecc | plus: cnt_vemcc | plus: cnt_gfmcc | plus: cnt_co | plus: cnt_cb | plus: cnt_oth | plus: cnt_ck | plus: cnt_vd | plus: cnt_card | plus: cnt_bx | plus: cnt_ac | plus: cnt_gb | plus: cnt_cd }}</span> 

		{% if cnt_cc > 0 or cnt_ccpk > 0 %}  <span>CC: {{ cnt_cc | plus: cnt_ccpk }} &#9634; </span> {% endif %}
		{% if cnt_gfcc > 0 %}  <span>GFCC: {{ cnt_gfcc }} &#9634; </span> {% endif %}
		{% if cnt_vecc > 0 %}  <span>VECC: {{ cnt_vecc }} &#9634; </span> {% endif %}
		{% if cnt_mcc > 0 or cnt_mccpk > 0 %}  <span>MCC: {{ cnt_mcc | plus: cnt_mccpk }} &#9634; </span> {% endif %}
		{% if cnt_gfmcc > 0 %}  <span>GF-MINI: {{ cnt_gfmcc }} &#9634; </span> {% endif %}
		{% if cnt_vemcc > 0 %}  <span>VE-MINI: {{ cnt_vemcc }} &#9634; </span> {% endif %}
		{% if cnt_cb > 0 %}	 <span>BALLS: {{ cnt_cb }} &#9634; </span> {% endif %}
		{% if cnt_ck > 0 %}	 <span>CAKE: {{ cnt_ck }} &#9634; </span> {% endif %}
		{% if cnt_vd > 0 %}	 <span>VAL: {{ cnt_vd }} &#9634; </span> {% endif %}
		{% if cnt_co > 0 %}	 <span>COOKIES: {{ cnt_co }} &#9634; </span> {% endif %} 
		{% if cnt_card > 0 %}  <span>CARD: {{ cnt_card }} &#9634; </span> {% endif %}	 
		{% if cnt_bx > 0 %}  <span>BOX: {{ cnt_bx }} &#9634; </span> {% endif %}
		{% if cnt_ac > 0 %}  <span>ACC: {{ cnt_ac }} &#9634; </span> {% endif %}
		{% if cnt_cd > 0 %}  <span>CANDLES: {{ cnt_cd }} &#9634; </span> {% endif %}	 		
		{% if cnt_gb > 0 %}	 <span>GBox: {{ cnt_gb }} &#9634; </span> {% endif %}	 
		{% if cnt_oth > 0 %} <span>OTHER: {{ cnt_oth }} &#9634; </span> {% endif %}
			 &nbsp;  

	{% assign tdate = 'now' | date: '%s'  %}
    {% assign tdate_minus = tdate | plus:10800 | date: '%s'  %}        
    {% capture today_9pm %} {{tdate_minus | date: "%a, %b %d, %Y 21:00:00"}}{% endcapture%}  <!--- 9pm --> 
    {% assign today_9pm_sec = today_9pm | date: '%s'  %} <!--- 9pm to sec --> 
    {% assign order_date = new_current_day | date: '%s'  %}
	
			
	{% if order_date > today_9pm_sec %}
		{% assign ordercheck = "FO" %}
		{% assign ost = "Future" %}	
		{% assign printquan = print_cc | plus: print_co | plus: print_cb | plus: print_stndck | plus: print_ck %}			 
	{% else %}
		{% assign ordercheck = "SD" %}
		{% assign printquan = 1	%}
		{% assign ost = "Today" %}							 
    {% endif %}	

	{% if printquan == 0 %}
		{% assign printquan = 1	%}						 
    {% endif %}		
		
	{% if ddate %}
		{% assign otime = dt  %}
	{% endif %}	
	</div>

	<div class="f12">Paid: {{ gateway }} || Placed: {{ date | date: "%a, %b %d, %y at %I:%M%p" }} || {{ order_number }} || Print:{{printquan}}</div>

	<div style="font-size:6px;"> <!-- INFO ZAPS DO NOT CHANGE ORDER %!% ARE SEPERATORS --> 	
		%!%{{ billing_address.first_name }} {{billing_address.last_name}}%!%{{ shipping_address.name }}%!%{{tdate1}}%!%w{{ order_number }}%!%[{{ordercheck}}]%!%{{printquan}}%!%{{ email | url_encode }}%!%{{tdate2}}%!%{{billing_address.phone}}%!%{{otit}}%!%{{ost}}%!%{{otime}}%!%{{hascard}}%!%{{print_stndck}}%!%{{ new_current_day | date: '%a, %b %e'}}%!%{{ id }}%!%
	</div>
<div style="font-size:6px;">/!/{{ cnt_cc | plus: cnt_ccpk }}/!/{{ cnt_mcc | plus: cnt_mccpk }}/!/{{ cnt_vecc }}/!/{{ cnt_vemcc }}/!/{{ cnt_gfcc }}/!/{{ cnt_gfmcc }}/!/{{ cnt_cb }}/!/{{ cnt_ck }}/!/{{ cnt_co }}/!/ </div>

